datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Recipe {
  id             String   @id @default(cuid())
  name           String
  description    String
  ingredientList String[]
  instructions   String[]
  imageURL       String
  public         Boolean  @default(false)
  category       String[]

  userId     String
  user       User       @relation(fields: [userId], references: [id])
  familyId   String
  family     Family     @relation(fields: [familyId], references: [id])
  ratings    Rating[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]

  recipes  Recipe[]
  profile  Profile?
  Family   Family?  @relation(fields: [familyId], references: [id])
  familyId String?
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String?
  city        String?
  country     String?

  familyId String
  family   Family @relation(fields: [familyId], references: [id])
}

model Family {
  id String @id @default(cuid())

  people  User[]
  recipes Recipe[]

  Profile Profile[]
}

model Rating {
  id     String @id @default(cuid())
  review String
  stars  Int

  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
